#summary Sample code of using EntropyDB
#labels Featured,Phase-Implementation

== Introduction ==

This document contains code examples that explain how to use *EntropyDB* for persistency of objects.

== Opening a database ==

The following piece of code opens the database in a file called _test.db_ in the default document directory of the current iPhone application. The database file is created if it does not exist.

{{{
		NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
		NSString* documentsDirectory = [paths objectAtIndex: 0];
		NSString* dbFileName = [documentsDirectory stringByAppendingFormat: @"/test.db"];
		EXFile* file = [EXFile fileWithName: dbFileName];
		EXContainer* container = [[EXContainer alloc] initWithFile: file];
}}}

== Closing a database ==

A database is closed by releasing the instance of _EXContainer_.

{{{
		[container release];
}}}

== Storing an object in a database ==

An object can be stored in the database by calling the method _store:_ of _EXContainer_.

{{{
		id customObject = [[CustomObject alloc] init];
		[container store: customObject];
		[customObject release];
}}}

The following restrictions apply:
  * Only descendants of _NSObject_ can be stored.
  * Instance variables of the following primitive types are stored: _int, long, char, short, long long, float, double_.
  * Instance variables which are instances of objects are expected to have their retain count equal to 1.
  * You cannot store object hierarchies with reference cycles.

== Querying objects from a database ==

All objects of a certain class can be loaded from the database by using the method _queryWithClass:_.

{{{
		NSArray* resultSet = [container queryWithClass: [CustomObject class]];
		for (id object in resultSet) {
			// processing the object
		}
}}}

The result set is autoreleased.

One can load all objects of a certain class that conform to a certain condition by using the method _queryWithClass:predicate:_.

{{{
		EXPredicate* predicate = [[[EXPredicateEqualText alloc] initWithFieldName: @"company" value: @"Apple, Inc."] autorelease];
		NSArray* resultSet = [container queryWithClass: [CustomObject class] predicate: predicate];
		for (id object in resultSet) {
			// processing the object
		}
}}}

In the current preview version, there is only one predicate class, namely _ EXPredicateEqualText_, that can be used to load objects with a certain string value in an instance variable of type _NSString_ (as shown in the above code example).